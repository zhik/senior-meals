{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Map.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from \"svelte\";\n  import Map from \"./components/Map.svelte\";\n  import { features } from \"./stores\";\n\n  onMount(() => {\n    //fetch data from airtable\n    const fields = [\"Name\", \"Address\", \"X\", \"Y\", \"Last Updated\", \"Description\"];\n\n    const fields_param = fields.map(field => `fields%5B%5D=${field}`).join(\"&\");\n\n    fetch(\n      `https://api.airtable.com/v0/app3tVhWKeW5VpzEF/Locations?api_key=keyFBPWv6Khoq2XHg&${fields_param}`\n    )\n      .then(res => res.json())\n      .then(data => {\n        features.set(data.records);\n      });\n  });\n</script>\n\n<style>\n  main {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin: 2%;\n  }\n\n  .map {\n    height: 600px;\n    width: 100%;\n  }\n\n  .notes {\n    margin-top: 1rem;\n  }\n\n  .notes p {\n    margin: 1px;\n    color: rgb(73, 73, 73);\n  }\n</style>\n\n<main>\n  <h2>Senior Meals Pickup during COVID-19</h2>\n  <p>\n    As of 3/20 7:56PM Manhattan senior center meal pick up locations + times\n    (click on a point for more information)\n  </p>\n  <div class=\"map\">\n    <Map />\n  </div>\n  <div class=\"notes\">\n    <p>\n      This page is a work in progress. Additional filter features will be added\n      shortly. Contact\n      <a href=\"mailto:zhi@beta.nyc\">zhi@beta.nyc</a>\n      .\n    </p>\n    <p>\n      Data Sources can be found\n      <a target=\"_blank\" href=\"https://airtable.com/shr0AhGnyvs8L86nd\">\n        in this airtable.\n      </a>\n    </p>\n    <p>\n      Speical thanks to Paul Gale for starting the orginal map\n      <a\n        href=\"https://www.google.com/maps/d/u/0/viewer?mid=1Qn4l9Rtz9frQi15ISqumC7y9FnnP-8bo\">\n        here.\n      </a>\n    </p>\n  </div>\n\n</main>\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import { features } from \"../stores\";\n\n  let container;\n  let layer;\n  let map;\n  let zoom = 13;\n\n  onMount(() => {\n    map = L.map(container, { zoomControl: false }).setView([40.73, -74], zoom);\n    L.tileLayer(\n      \"https://cartodb-basemaps-{s}.global.ssl.fastly.net/rastertiles/voyager/{z}/{x}/{y}{r}.png\"\n    ).addTo(map);\n  });\n\n  $: if ($features.length && map) {\n    if (layer) map.removeLayer(layer);\n    const data = {\n      type: \"FeatureCollection\",\n      //generate featuers array\n      features: $features\n        .filter(feature => feature.fields.X && feature.fields.Y)\n        .map(feature => {\n          const {\n            Name: name,\n            X: x,\n            Y: y,\n            Address: address,\n            Description: description\n          } = feature.fields;\n\n          return {\n            type: \"Feature\",\n            properties: {\n              name,\n              address,\n              description,\n              x,\n              y\n            },\n            geometry: {\n              type: \"Point\",\n              coordinates: [x, y]\n            }\n          };\n        })\n    };\n\n    //map data, and add popup for each feature\n    layer = L.geoJSON(data, {\n      onEachFeature: (feature, layer) => {\n        const prop = feature.properties;\n\n        //keep new lines in description\n        const description = prop.description\n          ? prop.description.split(`\\n`).join(\"<br/>\")\n          : \"No description\";\n\n        const html = `\n            <h2>${prop.name}</h2>\n            <p><strong>Description:</strong><p>\n            <span>${description}</span>\n            <p><a href=\"https://maps.google.com/?q=${\n              prop.address ? prop.address : `${prop.y},${prop.x}`\n            }\" _target=\"_blank\"><strong>Address:</strong></a></p>\n            <p>${prop.address ? prop.address : \"\"}</p>\n        `;\n        layer.bindPopup(html);\n      }\n    }).addTo(map);\n    // const group = new L.featureGroup([layer]);\n    // map.fitBounds(group.getBounds());\n    // map.setZoom(zoom);\n  }\n</script>\n\n<style>\n  #map {\n    width: 100%;\n    height: 100%;\n    z-index: 1;\n  }\n  :global(.leaflet-popup-content) {\n    overflow: auto;\n    max-height: 100%;\n    word-wrap: break-word;\n    line-height: 0em;\n    font-size: 120%;\n    max-width: 80%;\n  }\n  :global(.leaflet-popup-content p) {\n    margin: 10px 0 !important;\n  }\n</style>\n\n<div id=\"map\" bind:this={container} />\n"
  ],
  "names": [],
  "mappings": "AAsBE,IAAI,8BAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,EAAE,AACZ,CAAC,AAED,IAAI,8BAAC,CAAC,AACJ,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,IAAI,AACb,CAAC,AAED,MAAM,8BAAC,CAAC,AACN,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,qBAAM,CAAC,CAAC,eAAC,CAAC,AACR,MAAM,CAAE,GAAG,CACX,KAAK,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,AACxB,CAAC;ACqCD,IAAI,cAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,CAAC,AACZ,CAAC,AACO,sBAAsB,AAAE,CAAC,AAC/B,QAAQ,CAAE,IAAI,CACd,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,UAAU,CACrB,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,IAAI,CACf,SAAS,CAAE,GAAG,AAChB,CAAC,AACO,wBAAwB,AAAE,CAAC,AACjC,MAAM,CAAE,IAAI,CAAC,CAAC,CAAC,UAAU,AAC3B,CAAC"
}